#include <iostream>
#include <vector>
#include <Eigen/Dense>
#include <unsupported/Eigen/FFT>
#include <Eigen/Eigen>
#include <Eigen/Core>

using namespace Eigen;
using namespace std;

int main()
{
    std::cout << "Using data chunk of size 256 AFTER FIR filterinng"<<std::endl; 
    // candidate_data is the data sliced, phase noise corrected, and abs() applied 
    std::vector<double> candidate_data = {0.0000000000013636,0.0001676287664113,-0.0000133247768503,-0.0000277674331173,-0.0000068099418263,0.0000596117765211,0.0000804036182720,0.0000333891155936,0.0000862467038052,-0.0000108918278221,-0.0000057188388318,0.0000192138785143,-0.0001207066007682,-0.0000417469880192,-0.0000603869766819,-0.0000723331609651,0.0001953665678058,-0.0001470175581933,0.0000435183022031,-0.0000768155537415,0.0000543413767981,-0.0000081724733856,-0.0001402441780503,0.0000682894615093,0.0000143612426484,0.0001160377137410,-0.0000606293731008,0.0001497414067251,0.0000433040802818,-0.0000468839353844,0.0000149755207243,0.0000124929610790,-0.0000771178103892,0.0000720910393278,-0.0000935474731864,0.0001291602005334,-0.0001037447231667,-0.0000007419755347,-0.0001385720687662,-0.0000407686873856,0.0000231632359029,-0.0000551522390234,0.0001367841532535,-0.0000163986604831,0.0000645495445776,0.0000505412294239,-0.0000877195147999,-0.0000352221250234,-0.0000592198298390,0.0000363498246358,0.0001699650187149,-0.0000649731370125,0.0001422154527307,-0.0000227831951423,0.0000994456367322,-0.0001670433879398,-0.0000896463316760,-0.0000565794171864,-0.0001448570814095,0.0002232567402221,-0.0000634096877508,0.0001135326543172,-0.0000841178057795,0.0000109665212404,-0.0000418051713555,-0.0000964101139163,0.0001102807253238,0.0000288766981647,0.0000122090549540,-0.0000246220180148,0.0000627477086340,-0.0000249733818516,0.0000422399020962,0.0000557501576850,-0.0000402319533985,-0.0000088849081184,0.0000233140357464,-0.0000308875313138,0.0000461936598736,-0.0001333951569216,0.0000684766176177,-0.0000401152758418,-0.0000710032009914,-0.0000987991161246,-0.0000177919389388,0.0001626599750029,-0.0001017458476497,0.0001654837690672,-0.0000077392986014,0.0000257361885116,-0.0000109968409253,-0.0000865673655683,0.0000683125647032,0.0000505696005532,0.0000044887146518,-0.0000152133496058,-0.0000009193271810,0.0000048364052907,-0.0001154751138650,0.0000283678768927,-0.0000352942248233,0.0000008907769146,0.0000771619171607,-0.0000745136024606,0.0001443837568934,-0.0000442135685624,0.0000305822859697,-0.0000274617213609,-0.0001098412997104,-0.0000044780190249,-0.0000680865055732,0.0000612000988560,0.0000481468795293,0.0000206051035847,0.0000455102826903,-0.0000435391530084,0.0000129182189651,-0.0000500370296539,-0.0000074470993333,0.0001981260405176,-0.0001124470439544,0.0000510221406640,-0.0000590026294403,0.0000551988969598,-0.0000956704081060,-0.0000836611279194,0.0000363145084764,-0.0000459742981221,0.0000885508000052,-0.0001323535402765,0.0001857308062049,-0.0000151691046206,0.0000058649510454,-0.0000639872343964,-0.0000989900311403,0.0001136903815432,0.0000826624737476,-0.0000123929985269,0.0001149382197453,-0.0000791129704260,0.0000320132182491,-0.0000648263453670,-0.0000009846194386,-0.0000270318655391,-0.0001157988017958,0.0000991978177139,-0.0000897072559058,0.0001297845321142,-0.0001081079374096,0.0000141517484448,-0.0000789419510906,-0.0000854258449004,0.0000469282917037,-0.0000034011811412,0.0001055368391441,-0.0000578978474912,0.0001966193156548,0.0001128253063177,-0.0000396726902357,0.0000165222966627,-0.0000809363283939,0.0000044652055245,0.0000828491448057,-0.0000448649240006,0.0000013236391075,-0.0001525032056043,0.0000681822088256,-0.0001109655682939,-0.0000657109426248,0.0000669412798945,-0.0001595725214541,0.0001395291978545,-0.0000792248849552,0.0001725567768809,-0.0000635698697843,0.0000232344670114,0.0000321962881205,-0.0001269347294186,0.0000299549879183,-0.0000294490351916,0.0001341555116794,0.0000290095345365,0.0000608139616666,0.0001028549013563,-0.0000188309912531,-0.0000138928744069,-0.0001057809587900,-0.0000134164040033,0.0001478567081385,-0.0001235991686133,0.0000627629930970,-0.0000968167401785,-0.0000208467173600,-0.0001596521795517,-0.0001096943223702,0.0000526144045521,-0.0000826419819195,0.0000828670038222,-0.0000926088306779,0.0001096011711702,0.0000447871930258,0.0001073567262086,0.0001084471363224,-0.0000018681249956,0.0000718918484407,0.0001376882723109,-0.0000529420825295,0.0000179057693137,-0.0000130103898228,0.0000415935999717,-0.0001278678199206,-0.0000412664676175,-0.0001456499484014,-0.0000934102342751,0.0000523835339451,-0.0001696287390403,0.0001320173748716,-0.0000591175810746,-0.0000234571124884,-0.0000949696963114,-0.0001274329774545,0.0001569487497123,0.0001372807673879,0.0001067919202301,0.0001194453183258,0.0000219318812578,0.0001008437886131,-0.0000674286570250,0.0000465659710038,-0.0000127928955246,-0.0000417633211936,0.0001528694681287,-0.0001516157942138,0.0000818367777220,-0.0001313736319300,0.0000170819724768,-0.0001739577702959,-0.0001366180154512,0.0000524106643296,-0.0001135138824606,0.0000854869385196,-0.0000799528649418,0.0000742055148041,-0.0000043482532109,0.0000305542595975,0.0000559889241191,-0.0001270053219564,0.0000711461207079,0.0000915828020984,0.0000753557338984,0.0001854403955910,-0.0000221497488725,0.0000441810737279,-0.0000870241062523,0.0000408444751921,0.0000000000015201};
    int sig_len = candidate_data.size();
    double min_val = *std::min_element(candidate_data.begin(), candidate_data.end());
    double max_val = *std::max_element(candidate_data.begin(), candidate_data.end());
    Eigen::VectorXcd sig_amp(sig_len);
    for (int i=0;i<sig_len;i++)
    {
        sig_amp[i] = (candidate_data.at(i)- min_val) / (max_val - min_val + 1e-32);
    }

    
    Eigen::FFT<double> fft;
    Eigen::VectorXcd Y(sig_len);
    fft.fwd(Y, sig_amp);

    int half_length = sig_len/2;
    double P1[half_length];
    for(int i=0;i<half_length;i++) 
    {
        P1[i] = std::abs(Y[i+1]); 
    }

    int feature_size = 32;
    double features[feature_size] = {0.0};
    int intevals = half_length/feature_size;

    for(int i=0; i<32; i++)
    {
        double temp_max = 0.0;
        for(int j=0; j<intevals;j++)
        {   
            if (P1[i*intevals+j] > temp_max)
            {
                temp_max = P1[i*intevals+j];
            }
        }
        features[i] += temp_max;
    }

    for(int i=0; i<32; i++)
    {
        cout << features[i] << ",";
    }
    // features is the input to SVM
    return 0;
}